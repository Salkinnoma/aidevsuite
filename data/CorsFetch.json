{"securityId":"aidevsuite_a1b2c3","name":"CorsFetch","code":"// Show URL input\r\nconst urlInput = createInput(textInputType, { placeholder: \"Enter URL here...\" });\r\nawait show(urlInput, { noAccept: true }); // Disable accepting input, so we can use our own fetch button.\r\n\r\nawait show(createBreak()); // Show break to create a strong visual separation\r\n// Show hidden text element for later use\r\nconst resultTarget = createText(paragraphType, \"\", { bordered: true, placeholder: \"Fetched text will be shown here...\" });\r\nawait show(resultTarget);\r\n\r\n// Define the function to fetch URL and show result\r\nasync function fetchUrl() {\r\n    let text;\r\n    try {\r\n        const userInput = (await read(urlInput.id)).text; // Get URL from user input\r\n\r\n        // Validate and sanitize the URL input\r\n        if (!userInput.startsWith('http://') && !userInput.startsWith('https://')) {\r\n            throw new Error(\"URL must start with 'http://' or 'https://'\");\r\n        }\r\n\r\n        // Use CORS proxy to fetch the URL\r\n        const proxyUrl = `https://cors-anywhere.herokuapp.com/${userInput}`;\r\n        const response = await fetch(proxyUrl); // Fetch the URL\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        text = await response.text(); // Get text content from response\r\n    } catch (error) {\r\n        text = \"Error: \" + error.message; // Set text to error message\r\n    }\r\n\r\n    await update(resultTarget.id, { text }); // Update text element and make it visible\r\n}\r\n\r\n// Show fetch button\r\nconst fetchButton = createButton(createText(paragraphType, \"Fetch URL\"), fetchUrl);\r\nconst fetchButtonWrapper = createFloatRightWrapper(fetchButton);\r\nawait show(fetchButtonWrapper, { insertAfter: urlInput.id }); // Show button after url input\r\n\r\nawait forever();","link":"corsfetch"}
