{"securityId":"aidevsuite_a1b2c3","name":"Fetch","code":"let init = false;\n\n// Show Proxy checkbox\nconst proxyLabel = createParagraph(\"Use Proxy\", {\n    title: \"Routes request over https://corsproxy.io.\"\n});\nconst proxyInput = createInput(checkboxInputType, { defaultValue: true });\nawait show(createHorizontalList([proxyLabel, proxyInput]), { noAccept: true });\n\n// Show html preview checkbox\nconst showHtmlLabel = createParagraph(\"Show Html Preview\");\nconst showHtmlInput = createInput(checkboxInputType, { defaultValue: false, onValidate: refresh });\nawait show(createHorizontalList([showHtmlLabel, showHtmlInput]), { noAccept: true });\n\n// Show URL input\nconst urlInput = createInput(textInputType, { placeholder: \"Enter URL here...\" });\nawait show(urlInput, { noAccept: true }); // Disable accepting input, so we can use our own fetch button.\n\nawait show(createBreak()); // Show break to create a strong visual separation\n// Show hidden text element for later use\nconst resultTarget = createText(paragraphType, \"\", { bordered: true, placeholder: \"Fetched text will be shown here...\", maxHeight: 6 });\nawait show(resultTarget);\n\n// Show html preview\nconst previewElement = createHtml(null, { hide: true, placeholder: \"Fetched html will be shown here...\" });\nawait show(previewElement);\n\nlet text;\nasync function refresh() {\n    if (!init) return; // Wait until all elements have loaded\n\n    // Check whether to show an html preview or simple plain text\n    const showHtml = (await read(showHtmlInput.id)).checked;\n    const hidePreview = !showHtml;\n\n    // Update element contents and their visibility\n    await update(resultTarget.id, { text, hide: !hidePreview });\n\n    const html = showHtml ? text : '';\n    await update(previewElement.id, { html, hide: hidePreview });\n}\n\n// Define the function to fetch URL and show result\nasync function fetchUrl() {\n    if (!init) return; // Wait until all elements have loaded\n\n    // Read url and fetch if not empty\n    let url = (await read(urlInput.id)).text;\n    if (url) {\n        try {\n            const useProxy = (await read(proxyInput.id)).checked;\n\n            // Use proxy if desired\n            if (useProxy) {\n                url = 'https://corsproxy.io/?' + encodeURIComponent(url);\n            }\n\n            const response = await fetch(url); // Fetch the URL\n            text = await response.text(); // Get text content from response\n        } catch (error) {\n            text = \"Error: \" + error.message; // Set text to error message\n        }\n    }\n\n    await refresh();\n}\n\n// Show fetch button\nconst fetchButton = createButton(createText(paragraphType, \"Fetch URL\"), fetchUrl);\nconst fetchButtonWrapper = createFloatRightWrapper(fetchButton);\nawait show(fetchButtonWrapper, { insertAfter: urlInput.id }); // Show button after url input\n\ninit = true;\nawait forever();","link":"fetch"}