{"securityId":"aidevsuite_a1b2c3","name":"Help Chat","code":"await setStatus(\"Ready to help...\"); // Set status as flavor\nawait show(createTitle(\"How Can I Help You?\"));\n// Show input box for the user to enter their prompt\nconst promptInput = createInput(textInputType, { // Add text input to allow user to input their prompt\n    placeholder: \"Enter any questions or problems here...\", // Add placeholder to better communicate with the user\n});\nawait show(promptInput, { noAccept: true }); // Show the input without an accept button, so we can reuse it.\n\nconst workerScript = await fetchTextInternal(`worker.js`);\nconst readme = await fetchTextInternal(`README.md`);\nconst systemPrompt = `This is the worker script:\\n${workerScript}\\n\\nThis is the readme:\\n${readme}\\n\\nThis is the site layout:\\nThere is a sidebar that contains the buttons Home, Local, one button per saved local page by name, Extern, one button per saved linked page by name in the top half, and te buttons Worker, Source and Help in the bottom half. Home opens the home page with a list of local pages, linked pages and sample pages. Local opens a code editor that allows creating a local tool and saving (via star icon bookmark button). Extern opens a code editor that allows creating loading an extern tool and saving (via star icon bookmark button) as either linked page or local. Worker allows the user to browse the worker file in which their tool is run, Source links to the github page (https://github.com/DeadlyArtist/aidevsuite), Help links to you. Top right contains a light/dark mode toggle and a settings button, which allows setting API keys and disabling AI. Since the user is talking to you, an AI, they must have AI enabled and input at least one API key.\\n\\nYou are a helpful help chatbot. The user will ask you question about this site, how it works, how to navigate it, and how to write tools. You must answer the users questions to the best of your ability. If you don't know the answer to a question or aren't sure, try to troubleshoot.`;\n\nconst context = [toSystemMessage(systemPrompt)]; // Define context to pass to chatbot\nasync function run() { // Define run function to be called on chat button click\n    const prompt = (await read(promptInput.id)).text; // Read text value of prompt input\n    context.push(toUserMessage(prompt)); // Add user prompt to chat context\n\n    const userMessageElement = createText(paragraphType, `User:\\n${prompt}`, { bordered: true }); // Add border to user message to make it easier for the user to see in the sea of messages\n    await show(userMessageElement, { insertBefore: promptInput.id }); // Insert before prompt input, as that should stay at the bottom.\n    const assistantMessageElement = createMarkdown(\"\"); // Show assistant message in markdown to make it more appealing\n    await show(assistantMessageElement, { insertBefore: promptInput.id }); // Insert before prompt input, as that should stay at the bottom.\n\n    const result = await chat(context, { id: assistantMessageElement.id }); // Chat and stream to the last assistant message element.\n    context.push(toAssistantMessage(result)); // Save assistant response to chat context\n}\n\nconst button = createButton(createText(paragraphType, \"Chat\"), run); // Button that calls run() on click\nconst wrapper = createFloatRightWrapper(button); // Make chat button float to the right\nawait show(wrapper); // Show the button\n\nawait forever(); // Never finish the script","link":"help_chat"}